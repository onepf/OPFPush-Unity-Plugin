apply plugin: 'java'

dependencies {
    runtime(project(':android')) {
        transitive = false
    }

    runtime('org.onepf:opfutils:0.1.23') {
        transitive false
    }
    runtime('org.onepf:opfpush:0.3.0') {
        transitive false
    }
    runtime('org.onepf:opfpush-gcm:0.3.0') {
        transitive false
    }
    runtime('org.onepf:opfpush-adm:0.3.0') {
        transitive false
    }
    runtime('org.onepf:opfpush-nokia:0.3.0') {
        transitive false
    }
    runtime('com.nokia:push:1.0') {
        transitive false
    }
}

// Build unity package
def sep = File.separator
def unityRootAbsolutePath = "${rootProject.projectDir.absolutePath}${sep}opfpush-unity${sep}unity"
def unitySrcPath = "${unityRootAbsolutePath}${sep}Assets${sep}Plugins${sep}Android"

clean {
    doLast {
        project.buildDir.deleteDir()

        //delete old dependencies
        file(unitySrcPath).eachFileMatch(~/(((?!android-support-v4.jar|google-play-services.jar).).*.jar)|(.*.meta)|(.*.aar)/) { file ->
            println 'delete ' + file
            file.delete()
        }
    }
}

build {
    doLast {
        def unityPackageAbsolutePath = "${project.buildDir.absolutePath}${sep}outputs"
        def unityPath = getUnityExecutablePath()
        delete fileTree(dir: unityPackageAbsolutePath, include: '*.unitypackage')
        mkdir unityPackageAbsolutePath

        //get dependencies jars
        configurations.runtime.resolve().each {
            println it
            def dependency = it
            copy {
                from dependency.getParent()
                into unitySrcPath
                include dependency.getName()
            }
        }

        //get opfpush-unity.jar
        def tmpDirPath = "${unitySrcPath}${sep}tmp"

        //move android project archive to tmp dir for unzip
        mkdir tmpDirPath
        file("${unitySrcPath}${sep}android-release.aar").renameTo(file("${tmpDirPath}${sep}android-release.zip"))
        ant.unzip(src: "${tmpDirPath}${sep}android-release.zip", dest: tmpDirPath)

        //copy classes.jar to Android src dir with renaming
        copy {
            from tmpDirPath
            into unitySrcPath
            include 'classes.jar'
        }
        file("${unitySrcPath}${sep}classes.jar").renameTo "${unitySrcPath}${sep}opfpush-unity-${VERSION_NAME}.jar"

        //Remove tmp dir
        file(tmpDirPath).deleteDir()

        println "Unity executable: $unityPath"
        println "Unity package source root: $unityRootAbsolutePath"
        println "Unity package build: $unityPackageAbsolutePath"

        project.exec {
            commandLine unityPath
            args '-batchmode'
            args '-projectPath'
            args "${unityRootAbsolutePath}"
            args '-exportPackage'
            args "Assets${sep}Plugins"
            args "${unityPackageAbsolutePath}${sep}opfpush-${VERSION_NAME}.unitypackage"
            args '-logFile'
            args "${unityPackageAbsolutePath}${sep}unity-plugin-build.log"
            args '-quit'
        }

        println "Build log: ${unityPackageAbsolutePath}${sep}unity-plugin-build.log"
    }
}

def getUnityExecutablePath() {
    if (project.hasProperty('unityExecutable')) {
        return project.property('unityExecutable');
    } else {
        def paths = ['unityMacPath', 'unityWin86Path', 'unityWin64Path',]
        for (path in paths) {
            if (file(project.property(path)).exists()) {
                return project.property(path);
            }
        }
    }

    throw new RuntimeException("Unity not found. Please make sure Unity " +
            "is installed at default location or provide 'unityExecutable' property.");
}